{"version":3,"sources":["window.service.ts"],"names":["common_1","require","core_1","exports","WINDOW","InjectionToken","WindowRef","Object","defineProperty","prototype","Error","BrowserWindowRef","_super","call","this","__extends","window","windowFactory","browserWindowRef","platformId","isPlatformBrowser","nativeWindow","browserWindowProvider","provide","useClass","windowProvider","useFactory","deps","PLATFORM_ID","WINDOW_PROVIDERS"],"mappings":"gZAAA,IAAAA,SAAAC,QAAA,mBACAC,OAAAD,QAAA,iBAGaE,QAAAC,OAAS,IAAIF,OAAAG,eAAe,eAGzC,IAAAC,UAAA,WAAA,SAAAA,KAIA,OAHEC,OAAAC,eAAIF,EAAAG,UAAA,eAAY,KAAhB,WACE,MAAM,IAAIC,MAAM,qDAEpBJ,EAJA,GAMAK,iBAAA,SAAAC,GACE,SAAAD,WACEC,EAAAC,KAAAC,OAAOA,KAMX,OARsCC,UAAAJ,EAAAC,GAKpCL,OAAAC,eAAIG,EAAAF,UAAA,eAAY,KAAhB,WACE,OAAOO,wCAEXL,EARA,CANsBR,QAAAG,UAAAA,WAiBtB,SAAgBW,cAAcC,EAAoCC,GAChE,OAAInB,SAAAoB,kBAAkBD,GACbD,EAAiBG,aAEnB,IAAId,OAfAJ,QAAAQ,iBAAAA,iBAWbR,QAAAc,cAAAA,cAQad,QAAAmB,sBAAuC,CAClDC,QAASjB,UACTkB,SAAUb,kBAICR,QAAAsB,eAAkC,CAC7CF,QAASpB,QAAAC,OACTsB,WAAYT,cACZU,KAAM,CAAErB,UAAWJ,OAAA0B,cAIRzB,QAAA0B,iBAAmB,CAC9B1B,QAAAmB,sBACAnB,QAAAsB","file":"window.service.min.js","sourcesContent":["import { isPlatformBrowser } from '@angular/common';\nimport { ClassProvider, FactoryProvider, InjectionToken, PLATFORM_ID } from '@angular/core';\n\n/* Create a new injection token for injecting the window into a component. */\nexport const WINDOW = new InjectionToken('WindowToken');\n\n/* Define abstract class for obtaining reference to the global window object. */\nexport abstract class WindowRef {\n  get nativeWindow(): Window | Object {\n    throw new Error('Not implemented.');\n  }\n}\n/* Define class that implements the abstract class and returns the native window object. */\nexport class BrowserWindowRef extends WindowRef {\n  constructor() {\n    super();\n  }\n\n  get nativeWindow(): Window | Object {\n    return window;\n  }\n}\n\n/* Create an factory function that returns the native window object. */\nexport function windowFactory(browserWindowRef: BrowserWindowRef, platformId: Object): Window | Object {\n  if (isPlatformBrowser(platformId)) {\n    return browserWindowRef.nativeWindow;\n  }\n  return new Object();\n}\n\n/* Create a injectable provider for the WindowRef token that uses the BrowserWindowRef class. */\nexport const browserWindowProvider: ClassProvider = {\n  provide: WindowRef,\n  useClass: BrowserWindowRef\n};\n\n/* Create an injectable provider that uses the windowFactory function for returning the native window object. */\nexport const windowProvider: FactoryProvider = {\n  provide: WINDOW,\n  useFactory: windowFactory,\n  deps: [ WindowRef, PLATFORM_ID ]\n};\n\n/* Create an array of providers. */\nexport const WINDOW_PROVIDERS = [\n  browserWindowProvider,\n  windowProvider\n];\n"]}