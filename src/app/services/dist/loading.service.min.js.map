{"version":3,"sources":["loading.service.ts"],"names":["core_1","require","rxjs_1","LoadingService","this","loading$","BehaviorSubject","prototype","isLoading","asObservable","showLoader","next","hideLoader","__decorate","Injectable","providedIn","exports"],"mappings":"6YAAA,IAAAA,OAAAC,QAAA,iBACAC,OAAAD,QAAA,QAKAE,eAAA,WAAA,SAAAA,IACUC,KAAAC,SAAW,IAAIH,OAAAI,iBAAgB,GAazC,OAXSH,EAAAI,UAAAC,UAAP,WACE,OAAOJ,KAAKC,SAASI,gBAGhBN,EAAAI,UAAAG,WAAP,WACEN,KAAKC,SAASM,MAAK,IAGdR,EAAAI,UAAAK,WAAP,WACER,KAAKC,SAASM,MAAK,IAZVR,EAAcU,WAAA,CAH1Bb,OAAAc,WAAW,CACVC,WAAY,UAEDZ,GAAb,GAAaa,QAAAb,eAAAA","file":"loading.service.min.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LoadingService {\n  private loading$ = new BehaviorSubject(false);\n\n  public isLoading(): Observable<boolean> {\n    return this.loading$.asObservable();\n  }\n\n  public showLoader(): void {\n    this.loading$.next(true);\n  }\n\n  public hideLoader(): void {\n    this.loading$.next(false);\n  }\n}\n"]}