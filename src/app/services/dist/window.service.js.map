{"version":3,"sources":["window.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,0CAAoD;AACpD,sCAA4F;AAE5F,6EAA6E;AAChE,QAAA,MAAM,GAAG,IAAI,qBAAc,CAAC,aAAa,CAAC,CAAC;AAExD,gFAAgF;AAChF;IAAA;IAIA,CAAC;IAHC,sBAAI,mCAAY;aAAhB;YACE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;QACtC,CAAC;;;OAAA;IACH,gBAAC;AAAD,CAJA,AAIC,IAAA;AAJqB,8BAAS;AAK/B,2FAA2F;AAC3F;IAAsC,oCAAS;IAC7C;eACE,iBAAO;IACT,CAAC;IAED,sBAAI,0CAAY;aAAhB;YACE,OAAO,MAAM,CAAC;QAChB,CAAC;;;OAAA;IACH,uBAAC;AAAD,CARA,AAQC,CARqC,SAAS,GAQ9C;AARY,4CAAgB;AAU7B,uEAAuE;AACvE,SAAgB,aAAa,CAAC,gBAAkC,EAAE,UAAkB;IAClF,IAAI,0BAAiB,CAAC,UAAU,CAAC,EAAE;QACjC,OAAO,gBAAgB,CAAC,YAAY,CAAC;KACtC;IACD,OAAO,IAAI,MAAM,EAAE,CAAC;AACtB,CAAC;AALD,sCAKC;AAED,gGAAgG;AACnF,QAAA,qBAAqB,GAAkB;IAClD,OAAO,EAAE,SAAS;IAClB,QAAQ,EAAE,gBAAgB;CAC3B,CAAC;AAEF,gHAAgH;AACnG,QAAA,cAAc,GAAoB;IAC7C,OAAO,EAAE,cAAM;IACf,UAAU,EAAE,aAAa;IACzB,IAAI,EAAE,CAAE,SAAS,EAAE,kBAAW,CAAE;CACjC,CAAC;AAEF,mCAAmC;AACtB,QAAA,gBAAgB,GAAG;IAC9B,6BAAqB;IACrB,sBAAc;CACf,CAAC","file":"window.service.js","sourcesContent":["import { isPlatformBrowser } from '@angular/common';\nimport { ClassProvider, FactoryProvider, InjectionToken, PLATFORM_ID } from '@angular/core';\n\n/* Create a new injection token for injecting the window into a component. */\nexport const WINDOW = new InjectionToken('WindowToken');\n\n/* Define abstract class for obtaining reference to the global window object. */\nexport abstract class WindowRef {\n  get nativeWindow(): Window | Object {\n    throw new Error('Not implemented.');\n  }\n}\n/* Define class that implements the abstract class and returns the native window object. */\nexport class BrowserWindowRef extends WindowRef {\n  constructor() {\n    super();\n  }\n\n  get nativeWindow(): Window | Object {\n    return window;\n  }\n}\n\n/* Create an factory function that returns the native window object. */\nexport function windowFactory(browserWindowRef: BrowserWindowRef, platformId: Object): Window | Object {\n  if (isPlatformBrowser(platformId)) {\n    return browserWindowRef.nativeWindow;\n  }\n  return new Object();\n}\n\n/* Create a injectable provider for the WindowRef token that uses the BrowserWindowRef class. */\nexport const browserWindowProvider: ClassProvider = {\n  provide: WindowRef,\n  useClass: BrowserWindowRef\n};\n\n/* Create an injectable provider that uses the windowFactory function for returning the native window object. */\nexport const windowProvider: FactoryProvider = {\n  provide: WINDOW,\n  useFactory: windowFactory,\n  deps: [ WindowRef, PLATFORM_ID ]\n};\n\n/* Create an array of providers. */\nexport const WINDOW_PROVIDERS = [\n  browserWindowProvider,\n  windowProvider\n];\n"]}