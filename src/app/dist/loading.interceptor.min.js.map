{"version":3,"sources":["loading.interceptor.ts"],"names":["core_1","require","operators_1","LoadingInterceptor","loadingService","this","prototype","intercept","req","next","_this","showLoader","handle","pipe","finalize","hideLoader","__decorate","Injectable","exports"],"mappings":"6YAAA,IAAAA,OAAAC,QAAA,iBAQAC,YAAAD,QAAA,kBAIAE,mBAAA,WACE,SAAAA,EAAoBC,GAAAC,KAAAD,eAAAA,EAYtB,OAVSD,EAAAG,UAAAC,UAAP,SACEC,EACAC,GAFF,IAAAC,EAAAL,KAME,OAFAA,KAAKD,eAAeO,aAEbF,EACJG,OAAOJ,GACPK,KAAKX,YAAAY,SAAS,WAAM,OAAAJ,EAAKN,eAAeW,iBAXlCZ,EAAkBa,WAAA,CAD9BhB,OAAAiB,cACYd,GAAb,GAAae,QAAAf,mBAAAA","file":"loading.interceptor.min.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { delay, finalize } from 'rxjs/operators';\nimport { LoadingService } from './services/loading.service';\n\n@Injectable()\nexport class LoadingInterceptor implements HttpInterceptor {\n  constructor(private loadingService: LoadingService) {}\n\n  public intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    this.loadingService.showLoader();\n\n    return next\n      .handle(req)\n      .pipe(finalize(() => this.loadingService.hideLoader()));\n  }\n}\n"]}