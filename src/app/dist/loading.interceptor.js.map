{"version":3,"sources":["loading.interceptor.ts"],"names":[],"mappings":";;;;;;;;AAAA,sCAA2C;AAQ3C,4CAAiD;AAIjD;IACE,4BAAoB,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;IAAG,CAAC;IAE/C,sCAAS,GAAhB,UACE,GAAqB,EACrB,IAAiB;QAFnB,iBASC;QALC,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,CAAC;QAEjC,OAAO,IAAI;aACR,MAAM,CAAC,GAAG,CAAC;aACX,IAAI,CAAC,oBAAQ,CAAC,cAAM,OAAA,KAAI,CAAC,cAAc,CAAC,UAAU,EAAE,EAAhC,CAAgC,CAAC,CAAC,CAAC;IAC5D,CAAC;IAZU,kBAAkB;QAD9B,iBAAU,EAAE;OACA,kBAAkB,CAa9B;IAAD,yBAAC;CAbD,AAaC,IAAA;AAbY,gDAAkB","file":"loading.interceptor.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { delay, finalize } from 'rxjs/operators';\nimport { LoadingService } from './services/loading.service';\n\n@Injectable()\nexport class LoadingInterceptor implements HttpInterceptor {\n  constructor(private loadingService: LoadingService) {}\n\n  public intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    this.loadingService.showLoader();\n\n    return next\n      .handle(req)\n      .pipe(finalize(() => this.loadingService.hideLoader()));\n  }\n}\n"]}